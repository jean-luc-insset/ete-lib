<?xml version="1.0" encoding="UTF-8" ?>


<!--
    Document   : entity2java.xml
    Created on : 1 octobre 2010, 18:18
    Versions   : 1.1 - importations de java.util.Date et java.util.List
    Author     : jldeleage
    Description:
        Modèle de classe à générer pour chaque entité du modèle.
        Ce modèle est particulièrement mauvais. Il ne prend pas en compte les
        cardinalités des associations, la notion de composition n'est pas
        traduite par des "cascades".
-->

<root xmlns:ete="http://www.jldeleage.com/mda/ns/jld.html"
        method="text" items="Entity"
        xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
        xmlns:h="http://xmlns.jcp.org/jsf/html"
        xmlns:f="http://xmlns.jcp.org/jsf/core"
        xmlns="http://www.jldeleage.com/mda/ns/jld.html"
        href="generated-sources/ete/€[ translate(package, '.', '/')]/€[ name ].java"
        >
<!--<ete:import href="operation.xml"/>-->
// Code généré automatiquement par le template entity2simplejava.xml
package €[ package ];

<for each="association[ type/name != 'Object' ] | composition">import  €[ type/package ].€[ type/name ];
</for>
<for each="operation">
    <if test="type/package">import €[type/package].€[type.name];</if>
    <for each="param"><if test="type/package">import €[type/package].€[type/name];</if>
    </for>
</for>
import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;<if test="hasSubclasses">
import javax.persistence.Inheritance;                      
</if>import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.MapKey;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Temporal;
import javax.persistence.Version;


@Generated("Ete - auteur : Jean-Luc Deleage jean-luc@insset.fr")
public class €[ name ] <choose>
    <when test="super-class">extends €[ super-class ]</when>
    <otherwise>extends Object</otherwise>
</choose> implements Serializable<if test="interface">, <forEach items="interface" var="i" sep="','">€[ i ]</forEach></if> {


    //========================================================================//
    //                           O P E R A T I O N S                          //
    //========================================================================//
    //                                                                        //
    // Ces opérations sont définies dans le modeleur (contrainte "body"), ou  //
    // bien le modèle ne contient que le résultat (contrainte "result") ou    //
    // simplement une préassaertion et une postassertion.                     //
    // Les opérations qui n'ont aucune spécification et qui ne sont pas       //
    // abstraites génèrent une exception.                                     //
    //                                                                        //
    //========================================================================//

<!-- TODO : revoir le moteur de templates pour permettre la modularité de
     ceux-ci -->
<!--    <ete:apply-templates select="operation" mode="entity"/>-->
<!-- TODO : générer une opération pour un attribut dérivé et contraint -->

<!--    <ete:for-each select="operation[result | bodyAsJava | body]">-->
    <ete:for-each select="operation">
    public €[ type/name ] €[ name ](<ete:for-each select="param" sep=", ">€[ type/name ] €[ name]</ete:for-each>) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    </ete:for-each>


 
    //========================================================================//
    //              A C C E S S E U R S   E T   M U T A T E U R S             //
    //========================================================================//
    //                                                                        //
    // Les attributs et les associations navigables sont générés.             //
    // Pour cune association de cardinalité supérieure à 1, les méthodes      //
    // addXXX et removeXXX sont ajoutées.                                     //
    //                                                                        //
    //========================================================================//


<!-- TODO : ne pas générer d'attribut pour les propriétés dérivées -->

<forEach items="property" var="att">
    <if test="type/name = 'java.util.Date' or type/name='date' or type/name='Date'">@Temporal(javax.persistence.TemporalType.DATE)</if>
    public €[ type/name ] get€[ ete:initMaj(name) ]() {
        return €[name];
    }

    public void set€[ ete:initMaj(name) ](€[ type/name ] €[name]) {
        this.€[name] = €[name];
    }</forEach>

<for each="association[type/name] | composition">
    @€[both-cardinalities]
    public €[ type/name ] get€[ ete:initMaj(name) ]() {
        return €[name];
    }

    public void set€[ ete:initMaj(name) ](€[ type/name ] €[name]) {
        this.€[name] = €[name];
    }
</for>

    //========================================================================//

<forEach items="property" var="att">
    private €[ type/name ] €[ name ];</forEach>

<forEach items="association | composition" var="ass">
    private <choose><when test="qualifier">Map&lt;€[qualifier/type/name],€[type/name]&gt;</when><when test="cardinality='*'">List&lt;€[ type/name ]&gt;</when><otherwise>€[ type/name ]</otherwise></choose> €[ name ];</forEach>
   
}  // €[ name ]

</root>
